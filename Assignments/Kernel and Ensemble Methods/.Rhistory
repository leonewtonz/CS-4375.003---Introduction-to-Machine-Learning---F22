library(e1071)
svm2 <- svm(Skin~., data=train, kernel="polynomial", cost=10, scale=TRUE)
summary(svm2)
pred2 <- predict(svm2, newdata = test)
table(pred2, test$Skin)
acc2 <- mean(pred2==test$Skin)
print(paste('Accuracy:', acc2))
tune_svm2 <- tune(svm, Skin~., data=vald, kernel="polynomial", ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune_svm2)
tune_svm2 <- tune(svm, Skin~., data=vald, kernel="polynomial", ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune_svm2)
tune_svm2 <- tune(svm, Skin~., data=vald, kernel="polynomial", ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune_svm2)
pred2_tune <- predict(tune_svm1$best.model, newdata = test)
table(pred2_tune, test$Skin)
acc2_tune <- mean(pred2_tune==test$Skin)
print(paste('Accuracy:', acc2_tune))
pred2_tune <- predict(tune_svm2$best.model, newdata = test)
table(pred2_tune, test$Skin)
acc2_tune <- mean(pred2_tune==test$Skin)
print(paste('Accuracy:', acc2_tune))
svm3 <- svm(Skin~., data=train, kernel="radial", cost=10, gamma=1, scale=TRUE)
summary(svm3)
svm3 <- svm(Skin~., data=train, kernel="radial", cost=10, gamma=1, scale=TRUE)
summary(svm3)
pred3 <- predict(svm3, newdata = test)
table(pred3, test$Skin)
acc3 <- mean(pred3==test$Skin)
print(paste('Accuracy:', acc3))
pred3 <- predict(svm3, newdata = test)
table(pred3, test$Skin)
acc3 <- mean(pred3==test$Skin)
print(paste('Accuracy:', acc3))
tune_svm2 <- tune(svm, Skin~., data=vald, kernel="polynomial", ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune_svm2)
set.seed(1234)
tune_svm1 <- tune(svm, Skin~., data=vald, kernel="linear", ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune_svm1)
set.seed(1234)
tune_svm3 <- tune(svm, Skin~., data=vald, kernel="radial", ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100),
gamma=c(0.5,1,2,3,4)))
summary(tune_svm3)
pred3_tune <- predict(tune_svm3$best.model, newdata = test)
table(pred3_tune, test$Skin)
acc3_tune <- mean(pred3_tune==test$Skin)
print(paste('Accuracy:', acc3_tune))
svm33 <- svm(Skin~., data=train, kernel="radial", cost=100, gamma=0.5, scale=TRUE)
summary(svm33)
pred33_tune <- predict(svm33, newdata = test)
table(pred33_tune, test$Skin)
acc33_tune <- mean(pred33_tune==test$Skin)
print(paste('Accuracy:', acc33_tune))
svm33 <- svm(Skin~., data=train, kernel="radial", cost=100, gamma=0.5, scale=TRUE)
summary(svm33)
pred33_tune <- predict(svm33, newdata = test)
table(pred33_tune, test$Skin)
acc33_tune <- mean(pred33_tune==test$Skin)
print(paste('Accuracy:', acc33_tune))
df_origin <- read.csv("data/Skin Segmentation.csv", header=TRUE)
str(df_origin)
dim(df_origin)
set.seed(1234)
df <- df_origin[sample(1:nrow(df_origin), 10000, replace = FALSE),]
str(df)
dim(df)
df$Skin <- factor(df$Skin)
levels(df$Skin) <- c("Skin", "NonSkin")
str(df)
set.seed(1234)
i <- sample(1:nrow(df), 0.8*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
summary(train)
counts <- table(train$Skin)
barplot(counts, xlab="Skin Sample", ylab="Frequency", col=c("wheat", "seagreen"))
par(mfrow=c(1,3))
plot(train$Skin, train$B, data = train, main = "Blue", col="blue")
plot(train$Skin, train$G, data = train, main = "Green", col="green")
plot(train$Skin, train$R, data = train, main = "Red", col="red")
install.packages("mltools")
library(mltools)
library(tree)
tree <- tree(Skin~., data=train)
tree
summary(tree)
plot(tree)
text(tree, cex=0.5, pretty=0)
pred_dt <- predict(tree, newdata = test, type="class")
table(pred_dt, test$Skin)
acc_dt <- mean(pred_dt==test$Skin)
mcc_dt <- mcc(factor(pred_dt), test$Skin)
print(paste('Accuracy:', acc_dt))
print(paste('mcc:', mcc_dt))
pred_dt <- predict(tree, newdata = test, type="class")
table(pred_dt, test$Skin)
acc_dt <- mean(pred_dt==test$Skin)
mcc_dt <- mcc(pred_dt, test$Skin)
print(paste('Accuracy:', acc_dt))
print(paste('mcc:', mcc_dt))
library(randomForest)
set.seed(1234)
rf <- randomForest(Skin~., data=train, importance=TRUE)
rf
summary(rf)
pred_rf <- predict(rf, newdata = test, type="response")
table(pred_rf, test$Skin)
acc_rf <- mean(pred_rf==test$Skin)
mcc_rf <- mcc(factor(pred_rf), test$Skin)
print(paste('Accuracy:', acc_rf))
print(paste('mcc:', mcc_rf))
pred_rf <- predict(rf, newdata = test, type="response")
table(pred_rf, test$Skin)
acc_rf <- mean(pred_rf==test$Skin)
mcc_rf <- mcc(pred_rf, test$Skin)
print(paste('Accuracy:', acc_rf))
print(paste('mcc:', mcc_rf))
library(adabag)
adab1 <- boosting(Skin~., data=train, boos=TRUE, mfinal=20, coeflearn='Breiman')
summary(adab1)
pred_adabag <- predict(adab1, newdata = test, type="response")
table(pred_adabag, test$Skin)
pred_adabag <- predict(adab1, newdata = test, type="response")
table(pred_adabag$class, test$Skin)
acc_adabag <- mean(pred_adabag==test$Skin)
mcc_adabag <- mcc(pred_adabag, test$Skin)
pred_adabag <- predict(adab1, newdata = test, type="response")
table(pred_adabag$class, test$Skin)
acc_adabag <- mean(pred_adabag==test$Skin)
mcc_adabag <- mcc(pred_adabag$class, test$Skin)
pred_adabag <- predict(adab1, newdata = test, type="response")
table(pred_adabag$class, test$Skin)
acc_adabag <- mean(pred_adabag==test$Skin)
mcc_adabag <- mcc(factor(pred_adabag$class), test$Skin)
print(paste('Accuracy:', acc_adabag))
print(paste('mcc:', mcc_adabag))
pred_adabag <- predict(adab1, newdata = test, type="response")
table(pred_adabag$class, test$Skin)
acc_adabag <- mean(pred_adabag$class==test$Skin)
mcc_adabag <- mcc(factor(pred_adabag$class), test$Skin)
print(paste('Accuracy:', acc_adabag))
print(paste('mcc:', mcc_adabag))
pred_adabag <- predict(adab1, newdata = test, type="response")
table(pred_adabag$class, test$Skin)
acc_adabag <- mean(pred_adabag$class==test$Skin)
mcc_adabag <- mcc(factor(pred_adabag$class), test$Skin)
print(paste('Accuracy:', acc_adabag))
print(paste('mcc:', mcc_adabag))
train$Skin[4]
train$Skin[]
train$Skin[1]
train$Skin[1]
print(typeof(train$Skin)
x <- train$Skin[1]
class(x)
contrasts(train$Skin)
library(xgboost)
train_label <- ifelse(train$Skin==1, 1, 0)
train_matrix <- data.matrix(train[, -4])
model <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
library(xgboost)
train_label <- ifelse(train$Skin==2, 1, 0)
train_matrix <- data.matrix(train[, -4])
model <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
library(xgboost)
train_label <- ifelse(train$Skin==3, 1, 0)
train_matrix <- data.matrix(train[, -4])
model <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
library(xgboost)
train_label <- ifelse(train$Skin==1, 1, 0)
train_matrix <- data.matrix(train[, -4])
model <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
library(xgboost)
train_label <- ifelse(train$Skin==1, 1, 0)
train_matrix <- data.matrix(train[, -4])
model <- xgboost(data=train_matrix, label=train_label,
nrounds=5, objective='binary:logistic')
library(xgboost)
train_label <- ifelse(train$Skin==1, 1, 0)
train_matrix <- data.matrix(train[, -4])
model <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
test_label <- ifelse(test$Skint==1, 1, 0)
test_matrix <- data.matrix(test[, -4])
probs <- predict(model, test_matrix)
pred_xgb <- ifelse(probs>0.5, 1, 0)
acc_xgb <- mean(pred_xgb==test_label)
mcc_xgb <- mcc(pred_xgb, test_label)
print(paste("accuracy=", acc_xgb))
print(paste("mcc=", mcc_xgb))
library(xgboost)
train_label <- ifelse(train$Skin==1, 1, 0)
train_matrix <- data.matrix(train[, -4])
xgb <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
test_label <- ifelse(test$Skint==1, 1, 0)
test_matrix <- data.matrix(test[, -4])
pred_xgb <- predict(xgb, test_matrix)
acc_xgb <- mean(pred_xgb==test_label)
mcc_xgb <- mcc(pred_xgb, test_label)
print(paste("accuracy=", acc_xgb))
print(paste("mcc=", mcc_xgb))
test_label <- ifelse(test$Skint==1, 1, 0)
test_matrix <- data.matrix(test[, -4])
pred_xgb <- predict(xgb, test_matrix)
acc_xgb <- mean(pred_xgb==test_label)
mcc_xgb <- mcc(pred_xgb, test_label)
print(paste("accuracy=", acc_xgb))
print(paste("mcc=", mcc_xgb))
test_label <- ifelse(test$Skint==1, 1, 0)
test_matrix <- data.matrix(test[, -4])
pred_xgb <- predict(xgb, test_matrix)
pred_xgb
acc_xgb <- mean(pred_xgb==test_label)
mcc_xgb <- mcc(pred_xgb, test_label)
print(paste("accuracy=", acc_xgb))
print(paste("mcc=", mcc_xgb))
library(xgboost)
train_label <- ifelse(train$Skin==1, 1, 0)
train_matrix <- data.matrix(train[, -4])
xg <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
test_label <- ifelse(test$Skin==1, 1, 0)
test_matrix <- data.matrix(test[, -4])
probs <- predict(xg, test_matrix)
test_label <- ifelse(test$Skin==1, 1, 0)
test_matrix <- data.matrix(test[, -4])
probs <- predict(xg, test_matrix)
probs
library(adabag)
adab1 <- boosting(Skin~., data=train, boos=TRUE, mfinal=20, coeflearn='Breiman')
summary(adab1)
library(xgboost)
train_label <- ifelse(train$Skin==1, 1, 0)
train_lable[:10]
library(xgboost)
train_label <- ifelse(train$Skin==1, 1, 0)
train_label
library(xgboost)
train_label <- ifelse(train$Skin==2, 1, 0)
train_label
library(xgboost)
train$skin
train_label <- ifelse(train$Skin==, 1, 0)
library(xgboost)
train$skin
library(xgboost)
train$Skin
library(xgboost)
train$Skin
str(train)
df$Skin <- factor(df$Skin)
#levels(df$Skin) <- c("Skin", "NonSkin")
str(df)
df_origin <- read.csv("data/Skin Segmentation.csv", header=TRUE)
str(df_origin)
dim(df_origin)
set.seed(1234)
df <- df_origin[sample(1:nrow(df_origin), 10000, replace = FALSE),]
str(df)
dim(df)
df$Skin <- factor(df$Skin)
#levels(df$Skin) <- c("Skin", "NonSkin")
str(df)
set.seed(1234)
i <- sample(1:nrow(df), 0.8*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
summary(train)
set.seed(1234)
df <- df_origin[sample(1:nrow(df_origin), 10000, replace = FALSE),]
str(df)
dim(df)
df$Skin <- factor(df$Skin)
levels(df$Skin) <- c("Skin", "NonSkin")
str(df)
set.seed(1234)
i <- sample(1:nrow(df), 0.8*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
summary(train)
contrasts(train$Skin)
counts <- table(train$Skin)
barplot(counts, xlab="Skin Sample", ylab="Frequency", col=c("wheat", "seagreen"))
par(mfrow=c(1,3))
plot(train$Skin, train$B, data = train, main = "Blue", col="blue")
plot(train$Skin, train$G, data = train, main = "Green", col="green")
plot(train$Skin, train$R, data = train, main = "Red", col="red")
install.packages("mltools")
library(mltools)
install.packages("mltools")
library(tree)
tree <- tree(Skin~., data=train)
tree
summary(tree)
library(xgboost)
as.integer(train$Skin)
str(train)
library(xgboost)
as.integer(train$Skin)
train$Skin
str(train)
as.integer(train$Skin)
train$Skin
library(xgboost)
train_label <- ifelse(train$Skin==2, 1, 0)
train_matrix <- data.matrix(train[, -4])
xg <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
test_label <- ifelse(test$Skin==2, 1, 0)
test_matrix <- data.matrix(test[, -4])
probs <- predict(xg, test_matrix)
probs
test_label <- ifelse(test$Skin==2, 1, 0)
test_lable
test_label <- ifelse(test$Skin==2, 1, 0)
test_label
test$Skin
test_label <- ifelse(test$Skin==2, 1, 0)
test_label
as.integer(train$Skin)
train$Skin
library(xgboost)
train_label <- ifelse(as.integer(train$Skin)==2, 1, 0)
train_matrix <- data.matrix(train[, -4])
xg <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
test$Skin
test_label <- ifelse(test$Skin==2, 1, 0)
test_label
as.integer(test$Skin)
test$Skin
test$Skin
test_label <- ifelse(as.integer(train$Skin)==2, 1, 0)
test_label
library(xgboost)
train_label <- ifelse(as.integer(train$Skin)==2, 1, 0)
train_label
train_matrix <- data.matrix(train[, -4])
xg <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
as.integer(train$Skin)
train$Skin
as.integer(train$Skin)
train$Skin
str(train)
library(xgboost)
train_label <- ifelse(as.integer(train$Skin)==2, 1, 0)
train_label
train_matrix <- data.matrix(train[, -4])
train_matrix
xg <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
library(xgboost)
train_label <- ifelse(as.integer(train$Skin)==2, 1, 0)
train_label
train_matrix <- data.matrix(train[, -4])
xg <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
as.integer(train$Skin)
train$Skin
str(train)
as.integer(test$Skin)
test$Skin
str(test)
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_label
test_matrix <- data.matrix(test[, -31])
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_label
test_matrix <- data.matrix(test[, -4])
probs <- predict(xg, test_matrix)
pred <- ifelse(probs>0.5, 1, 0)
acc_xg <- mean(pred==test_label)
mcc_xg <- mcc(pred, test_label)
library(xgboost)
train_label <- ifelse(as.integer(train$Skin)==2, 1, 0)
#train_label
train_matrix <- data.matrix(train[, -4])
xg <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_matrix <- data.matrix(test[, -4])
probs <- predict(xg, test_matrix)
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_matrix <- data.matrix(test[, -4])
probs <- predict(xg, test_matrix)
probs
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_label
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_label
test_matrix <- data.matrix(test[, -4])
test_matrix
xg
library(xgboost)
train_label <- ifelse(as.integer(train$Skin)==2, 1, 0)
#train_label
train_matrix <- data.matrix(train[, -4])
xg <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
xg
library(xgboost)
train_label <- ifelse(as.integer(train$Skin)==2, 1, 0)
#train_label
train_matrix <- data.matrix(train[, -4])
xg <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
xg
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_label
test_matrix <- data.matrix(test[, -4])
test_matrix
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_label
test_matrix <- data.matrix(test[, -4])
test_matrix
probs <- predict(xg, test_matrix)
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_matrix <- data.matrix(test[, -4])
test_matrix
probs <- predict(xg, test_matrix)
probs
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_matrix <- data.matrix(test[, -4])
test_matrix
probs <- predict(xg, test_matrix)
probs
pred <- ifelse(probs>0.5, 1, 0)
acc_xg <- mean(pred==test_label)
mcc_xg <- mcc(pred, test_label)
pred_rf <- predict(rf, newdata = test, type="response")
pred_rf <- predict(rf, newdata = test, type="response")
df_origin <- read.csv("data/Skin Segmentation.csv", header=TRUE)
str(df_origin)
dim(df_origin)
set.seed(1234)
df <- df_origin[sample(1:nrow(df_origin), 10000, replace = FALSE),]
str(df)
dim(df)
df$Skin <- factor(df$Skin)
levels(df$Skin) <- c("Skin", "NonSkin")
str(df)
set.seed(1234)
i <- sample(1:nrow(df), 0.8*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
summary(train)
contrasts(train$Skin)
counts <- table(train$Skin)
barplot(counts, xlab="Skin Sample", ylab="Frequency", col=c("wheat", "seagreen"))
install.packages("mltools")
library(mltools)
library(mltools)
library(tree)
tree <- tree(Skin~., data=train)
tree
summary(tree)
plot(tree)
text(tree, cex=0.5, pretty=0)
pred_dt <- predict(tree, newdata = test, type="class")
table(pred_dt, test$Skin)
acc_dt <- mean(pred_dt==test$Skin)
mcc_dt <- mcc(pred_dt, test$Skin)
print(paste('Accuracy:', acc_dt))
print(paste('mcc:', mcc_dt))
library(randomForest)
set.seed(1234)
rf <- randomForest(Skin~., data=train, importance=TRUE)
rf
summary(rf)
pred_rf <- predict(rf, newdata = test, type="response")
table(pred_rf, test$Skin)
acc_rf <- mean(pred_rf==test$Skin)
mcc_rf <- mcc(pred_rf, test$Skin)
print(paste('Accuracy:', acc_rf))
print(paste('mcc:', mcc_rf))
library(adabag)
adab1 <- boosting(Skin~., data=train, boos=TRUE, mfinal=20, coeflearn='Breiman')
summary(adab1)
pred_adabag <- predict(adab1, newdata = test, type="response")
table(pred_adabag$class, test$Skin)
acc_adabag <- mean(pred_adabag$class==test$Skin)
mcc_adabag <- mcc(factor(pred_adabag$class), test$Skin)
print(paste('Accuracy:', acc_adabag))
print(paste('mcc:', mcc_adabag))
as.integer(train$Skin)
train$Skin
str(train)
library(xgboost)
train_label <- ifelse(as.integer(train$Skin)==2, 1, 0)
#train_label
train_matrix <- data.matrix(train[, -4])
xg <- xgboost(data=train_matrix, label=train_label,
nrounds=100, objective='binary:logistic')
xg
as.integer(test$Skin)
test$Skin
str(test)
test_label <- ifelse(as.integer(test$Skin)==2, 1, 0)
test_matrix <- data.matrix(test[, -4])
test_matrix
probs <- predict(xg, test_matrix)
probs
pred <- ifelse(probs>0.5, 1, 0)
acc_xg <- mean(pred==test_label)
mcc_xg <- mcc(pred, test_label)
print(paste("accuracy=", acc_xg))
print(paste("mcc=", mcc_xg))
